@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using H4.Day1.Identity.Data
@using Newtonsoft.Json
@using System.Text.Json

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject HttpClient _httpClient

<PageTitle>Log in</PageTitle>

<div class="row" style="margin-top:20px;">
    <div class="col-md-4" style="margin:0 auto;">
        <section>
            <StatusMessage Message="@errorMessage" />
            <h3>To-do list app, login:</h3>
            <hr />
            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" role="alert" />
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                    <label for="email" class="form-label">Email</label>
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
                    <label for="password" class="form-label">Password</label>
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>
                <div>
                    <button type="submit" class="w-100 btn btn-lg btn-primary">Log in</button>
                </div>
                <div class="checkbox mb-3" style="text-align:left;">
                    <label class="form-label">
                        <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" />
                        Remember me
                    </label>
                </div>
            </EditForm>
        </section>
    </div>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            

            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo("/");
        }
        else if (result.RequiresTwoFactor)
        {
            // Login the user and retrieve the token.
            Models.UserInfo loginInfo = new() { Email = Input.Email, Password = Input.Password };
            string serializedLoginInfo = JsonConvert.SerializeObject(loginInfo);
            StringContent sc2 = new StringContent(serializedLoginInfo, System.Text.Encoding.UTF8, "application/json");
            var response2 = await _httpClient.PostAsync("https://localhost:7182/login", sc2);

            string tokenAsJson = response2.Content.ReadAsStringAsync().Result;
            Newtonsoft.Json.Linq.JObject jObject = Newtonsoft.Json.Linq.JObject.Parse(tokenAsJson);
            string tokenValue = jObject.SelectToken("token").ToString();

            //-----------------------------------------------------------------------------
            // Handling user secrets

            // This must match the <UserSecretsId> in your .csproj file
            string userSecretsId = "aspnet-H4.Day1.Identity-1c2c1753-ed09-46cd-bbe6-3a23c8fed1b3";

            string secretsRoot = Path.Combine(
                Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData),
                "Microsoft",
                "UserSecrets",
                userSecretsId
            );

            string secretsPath = Path.Combine(secretsRoot, "secrets.json");
            if (File.Exists(secretsPath))
            {
                string json = File.ReadAllText(secretsPath);
                Dictionary<string, string> secrets = System.Text.Json.JsonSerializer.Deserialize<Dictionary<string, string>>(json) ?? new();

                // Add or update the key
                secrets["apitoken"] = tokenValue;

                // Save back to file
                string updatedJson = System.Text.Json.JsonSerializer.Serialize(secrets, new JsonSerializerOptions { WriteIndented = true });
                File.WriteAllText(secretsPath, updatedJson);
            }

            // END Handling user secrets
            //-----------------------------------------------------------------------------

            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
