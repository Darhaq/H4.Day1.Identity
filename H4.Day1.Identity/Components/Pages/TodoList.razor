@page "/TodoList"
@using H4.Day1.Identity.Codes
@using H4.Day1.Identity.Data
@using Microsoft.Extensions.Logging

@inject Data.TodoContext _toDoContext
@inject AuthenticationStateProvider _authenticationStateProvider
@inject NavigationManager _navigationManager
@inject Codes.AsymmetricEncryption asymmetricEncryption // Fixed typo 'asymmetriclaEncryption'

@attribute [Microsoft.AspNetCore.Authorization.Authorize(Policy = "AuthenticatedUser")]

<h2 style="margin-top:20px;text-decoration:underline;">To do list</h2>
<div class="row" style="margin-top:40px;">
    <div class="col-md-6" style="text-align:right;">
        Add to-do item:
    </div>
    <div class="col-md-6" style="text-align:left;">
        <input type="text" @bind="_toDoItem" style="width:150px;" />
        <br />
        <button class="btn-primary" @onclick="btnSubmitTodoItem_clicked" style="width:150px;height:45px;margin-top:4px;">Submit</button>
    </div>
</div>

<div style="width:80%;margin-top:18px;margin:0 auto;text-align:left;">
    @if (_TodoListObj != null && _TodoListObj.Count > 0)
    {
        <table class="table">
            <thead>
                <tr>
                    <th>My to do items</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in _TodoListObj)
                {
                    <tr>
                        <td>@(DecryptTodo(item.Item))</td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

@code {
    private string? _toDoItem;
    public string? _userName;
    public List<Todolist>? _TodoListObj = new List<Todolist>();

    protected override async Task OnInitializedAsync()
    {
        var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        _userName = authState.User.Identity?.Name;

        var todoDbUser = _toDoContext.Cprs.FirstOrDefault(x => x.User == _userName);
        if (todoDbUser != null)
            _TodoListObj = _toDoContext.Todolists.Where(x => x.UserId == todoDbUser.Id).ToList();
    }

    private async Task btnSubmitTodoItem_clicked() // Changed to async Task
    {
        if (!string.IsNullOrWhiteSpace(_toDoItem))
        {
            var logInUserId = _toDoContext.Cprs.FirstOrDefault(x => x.User == _userName)?.Id;
            if (logInUserId.HasValue)
            {
                await asymmetricEncryption.EncryptAsymmetric_webApi(_toDoItem, _userName); // Fixed instance usage
                
                _TodoListObj = _toDoContext.Todolists.Where(x => x.UserId == logInUserId.Value).ToList();
            }
        }
    }

    private string DecryptTodo(string encryptedText)
    {
        try
        {
            return asymmetricEncryption.DecryptAsymmetric(encryptedText);
        }
        catch (Exception ex)
        {
            return "[Decryption Error]";
        }
    }
}
